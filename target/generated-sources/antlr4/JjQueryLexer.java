// Generated from JjQuery.g4 by ANTLR 4.4
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class JjQueryLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		DOLLAR=1, LETTER=2, DIGIT=3, NUMBER=4, VAR=5, STRING=6, END=7, OPENP=8, 
		CLOSEP=9, OPENB=10, CLOSEB=11, IN=12, OUT=13, QUOTES=14, CONTAINS_SUB_STRING=15, 
		CONTAINS_WORD=16, CONTAINS_PREFIX=17, EQUALS=18, NOT_EQUALS=19, STARTS_WITH=20, 
		ENDS_WITH=21, BASIC_FILTER=22, CONTENT_FILTER=23, HIERARCHY_SELECTOR=24, 
		CHILD_FILTER=25, OPERATION=26, WS=27, BlockComment=28;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'"
	};
	public static final String[] ruleNames = {
		"DOLLAR", "LETTER", "DIGIT", "NUMBER", "VAR", "STRING", "END", "OPENP", 
		"CLOSEP", "OPENB", "CLOSEB", "IN", "OUT", "QUOTES", "CONTAINS_SUB_STRING", 
		"CONTAINS_WORD", "CONTAINS_PREFIX", "EQUALS", "NOT_EQUALS", "STARTS_WITH", 
		"ENDS_WITH", "BASIC_FILTER", "CONTENT_FILTER", "HIERARCHY_SELECTOR", "CHILD_FILTER", 
		"OPERATION", "WS", "BlockComment"
	};


	public JjQueryLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "JjQuery.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\36\u012b\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\3\2\3\2\3\3\3\3\3\4\3\4"+
		"\3\5\6\5C\n\5\r\5\16\5D\3\6\3\6\3\6\7\6J\n\6\f\6\16\6M\13\6\3\7\3\7\6"+
		"\7Q\n\7\r\7\16\7R\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3"+
		"\r\3\16\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\22\3"+
		"\22\3\22\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\26\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3"+
		"\27\3\27\5\27\u00a9\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u00cd\n\30"+
		"\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32"+
		"\u0114\n\32\3\33\3\33\3\33\3\34\6\34\u011a\n\34\r\34\16\34\u011b\3\34"+
		"\3\34\3\35\3\35\3\35\3\35\7\35\u0124\n\35\f\35\16\35\u0127\13\35\3\35"+
		"\3\35\3\35\3\u0125\2\36\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f"+
		"\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63"+
		"\33\65\34\67\359\36\3\2\6\6\2\"\"..C\\c|\3\2\62;\4\2@@\u0080\u0080\5\2"+
		"\13\f\17\17\"\"\u013e\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2"+
		"\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25"+
		"\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2"+
		"\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2"+
		"\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3"+
		"\2\2\2\29\3\2\2\2\3;\3\2\2\2\5=\3\2\2\2\7?\3\2\2\2\tB\3\2\2\2\13F\3\2"+
		"\2\2\rP\3\2\2\2\17T\3\2\2\2\21V\3\2\2\2\23X\3\2\2\2\25Z\3\2\2\2\27\\\3"+
		"\2\2\2\31^\3\2\2\2\33a\3\2\2\2\35e\3\2\2\2\37g\3\2\2\2!j\3\2\2\2#m\3\2"+
		"\2\2%p\3\2\2\2\'r\3\2\2\2)u\3\2\2\2+x\3\2\2\2-\u00a8\3\2\2\2/\u00cc\3"+
		"\2\2\2\61\u00ce\3\2\2\2\63\u0113\3\2\2\2\65\u0115\3\2\2\2\67\u0119\3\2"+
		"\2\29\u011f\3\2\2\2;<\7&\2\2<\4\3\2\2\2=>\t\2\2\2>\6\3\2\2\2?@\t\3\2\2"+
		"@\b\3\2\2\2AC\5\7\4\2BA\3\2\2\2CD\3\2\2\2DB\3\2\2\2DE\3\2\2\2E\n\3\2\2"+
		"\2FK\5\5\3\2GJ\5\5\3\2HJ\5\7\4\2IG\3\2\2\2IH\3\2\2\2JM\3\2\2\2KI\3\2\2"+
		"\2KL\3\2\2\2L\f\3\2\2\2MK\3\2\2\2NQ\5\5\3\2OQ\5\7\4\2PN\3\2\2\2PO\3\2"+
		"\2\2QR\3\2\2\2RP\3\2\2\2RS\3\2\2\2S\16\3\2\2\2TU\7=\2\2U\20\3\2\2\2VW"+
		"\7*\2\2W\22\3\2\2\2XY\7+\2\2Y\24\3\2\2\2Z[\7]\2\2[\26\3\2\2\2\\]\7_\2"+
		"\2]\30\3\2\2\2^_\7k\2\2_`\7p\2\2`\32\3\2\2\2ab\7q\2\2bc\7w\2\2cd\7v\2"+
		"\2d\34\3\2\2\2ef\7$\2\2f\36\3\2\2\2gh\7,\2\2hi\7?\2\2i \3\2\2\2jk\7\u0080"+
		"\2\2kl\7?\2\2l\"\3\2\2\2mn\7~\2\2no\7?\2\2o$\3\2\2\2pq\7?\2\2q&\3\2\2"+
		"\2rs\7#\2\2st\7?\2\2t(\3\2\2\2uv\7`\2\2vw\7?\2\2w*\3\2\2\2xy\7&\2\2yz"+
		"\7?\2\2z,\3\2\2\2{|\7<\2\2|}\7g\2\2}~\7s\2\2~\177\3\2\2\2\177\u0080\5"+
		"\21\t\2\u0080\u0081\5\23\n\2\u0081\u00a9\3\2\2\2\u0082\u0083\7<\2\2\u0083"+
		"\u0084\7p\2\2\u0084\u0085\7q\2\2\u0085\u0086\7v\2\2\u0086\u0087\3\2\2"+
		"\2\u0087\u0088\5\21\t\2\u0088\u0089\5\23\n\2\u0089\u00a9\3\2\2\2\u008a"+
		"\u008b\7<\2\2\u008b\u008c\7h\2\2\u008c\u008d\7k\2\2\u008d\u008e\7t\2\2"+
		"\u008e\u008f\7u\2\2\u008f\u00a9\7v\2\2\u0090\u0091\7<\2\2\u0091\u0092"+
		"\7n\2\2\u0092\u0093\7c\2\2\u0093\u0094\7u\2\2\u0094\u00a9\7v\2\2\u0095"+
		"\u0096\7<\2\2\u0096\u0097\7t\2\2\u0097\u0098\7q\2\2\u0098\u0099\7q\2\2"+
		"\u0099\u00a9\7v\2\2\u009a\u009b\7<\2\2\u009b\u009c\7i\2\2\u009c\u009d"+
		"\7v\2\2\u009d\u009e\3\2\2\2\u009e\u009f\5\21\t\2\u009f\u00a0\5\23\n\2"+
		"\u00a0\u00a9\3\2\2\2\u00a1\u00a2\7<\2\2\u00a2\u00a3\7n\2\2\u00a3\u00a4"+
		"\7v\2\2\u00a4\u00a5\3\2\2\2\u00a5\u00a6\5\21\t\2\u00a6\u00a7\5\23\n\2"+
		"\u00a7\u00a9\3\2\2\2\u00a8{\3\2\2\2\u00a8\u0082\3\2\2\2\u00a8\u008a\3"+
		"\2\2\2\u00a8\u0090\3\2\2\2\u00a8\u0095\3\2\2\2\u00a8\u009a\3\2\2\2\u00a8"+
		"\u00a1\3\2\2\2\u00a9.\3\2\2\2\u00aa\u00ab\7<\2\2\u00ab\u00ac\7e\2\2\u00ac"+
		"\u00ad\7q\2\2\u00ad\u00ae\7p\2\2\u00ae\u00af\7v\2\2\u00af\u00b0\7c\2\2"+
		"\u00b0\u00b1\7k\2\2\u00b1\u00b2\7p\2\2\u00b2\u00b3\7u\2\2\u00b3\u00b4"+
		"\3\2\2\2\u00b4\u00b5\5\21\t\2\u00b5\u00b6\5\23\n\2\u00b6\u00cd\3\2\2\2"+
		"\u00b7\u00b8\7<\2\2\u00b8\u00b9\7g\2\2\u00b9\u00ba\7o\2\2\u00ba\u00bb"+
		"\7r\2\2\u00bb\u00bc\7v\2\2\u00bc\u00cd\7{\2\2\u00bd\u00be\7<\2\2\u00be"+
		"\u00bf\7j\2\2\u00bf\u00c0\7c\2\2\u00c0\u00c1\7u\2\2\u00c1\u00c2\3\2\2"+
		"\2\u00c2\u00c3\5\21\t\2\u00c3\u00c4\5\23\n\2\u00c4\u00cd\3\2\2\2\u00c5"+
		"\u00c6\7<\2\2\u00c6\u00c7\7r\2\2\u00c7\u00c8\7c\2\2\u00c8\u00c9\7t\2\2"+
		"\u00c9\u00ca\7g\2\2\u00ca\u00cb\7p\2\2\u00cb\u00cd\7v\2\2\u00cc\u00aa"+
		"\3\2\2\2\u00cc\u00b7\3\2\2\2\u00cc\u00bd\3\2\2\2\u00cc\u00c5\3\2\2\2\u00cd"+
		"\60\3\2\2\2\u00ce\u00cf\t\4\2\2\u00cf\62\3\2\2\2\u00d0\u00d1\7<\2\2\u00d1"+
		"\u00d2\7h\2\2\u00d2\u00d3\7k\2\2\u00d3\u00d4\7t\2\2\u00d4\u00d5\7u\2\2"+
		"\u00d5\u00d6\7v\2\2\u00d6\u00d7\7/\2\2\u00d7\u00d8\7e\2\2\u00d8\u00d9"+
		"\7j\2\2\u00d9\u00da\7k\2\2\u00da\u00db\7n\2\2\u00db\u0114\7f\2\2\u00dc"+
		"\u00dd\7<\2\2\u00dd\u00de\7n\2\2\u00de\u00df\7c\2\2\u00df\u00e0\7u\2\2"+
		"\u00e0\u00e1\7v\2\2\u00e1\u00e2\7/\2\2\u00e2\u00e3\7e\2\2\u00e3\u00e4"+
		"\7j\2\2\u00e4\u00e5\7k\2\2\u00e5\u00e6\7n\2\2\u00e6\u0114\7f\2\2\u00e7"+
		"\u00e8\7<\2\2\u00e8\u00e9\7p\2\2\u00e9\u00ea\7v\2\2\u00ea\u00eb\7j\2\2"+
		"\u00eb\u00ec\7/\2\2\u00ec\u00ed\7e\2\2\u00ed\u00ee\7j\2\2\u00ee\u00ef"+
		"\7k\2\2\u00ef\u00f0\7n\2\2\u00f0\u00f1\7f\2\2\u00f1\u00f2\3\2\2\2\u00f2"+
		"\u00f3\5\21\t\2\u00f3\u00f4\5\23\n\2\u00f4\u0114\3\2\2\2\u00f5\u00f6\7"+
		"<\2\2\u00f6\u00f7\7p\2\2\u00f7\u00f8\7v\2\2\u00f8\u00f9\7j\2\2\u00f9\u00fa"+
		"\7/\2\2\u00fa\u00fb\7n\2\2\u00fb\u00fc\7c\2\2\u00fc\u00fd\7u\2\2\u00fd"+
		"\u00fe\7v\2\2\u00fe\u00ff\7/\2\2\u00ff\u0100\7e\2\2\u0100\u0101\7j\2\2"+
		"\u0101\u0102\7k\2\2\u0102\u0103\7n\2\2\u0103\u0104\7f\2\2\u0104\u0105"+
		"\3\2\2\2\u0105\u0106\5\21\t\2\u0106\u0107\5\23\n\2\u0107\u0114\3\2\2\2"+
		"\u0108\u0109\7<\2\2\u0109\u010a\7q\2\2\u010a\u010b\7p\2\2\u010b\u010c"+
		"\7n\2\2\u010c\u010d\7{\2\2\u010d\u010e\7/\2\2\u010e\u010f\7e\2\2\u010f"+
		"\u0110\7j\2\2\u0110\u0111\7k\2\2\u0111\u0112\7n\2\2\u0112\u0114\7f\2\2"+
		"\u0113\u00d0\3\2\2\2\u0113\u00dc\3\2\2\2\u0113\u00e7\3\2\2\2\u0113\u00f5"+
		"\3\2\2\2\u0113\u0108\3\2\2\2\u0114\64\3\2\2\2\u0115\u0116\7\60\2\2\u0116"+
		"\u0117\5\r\7\2\u0117\66\3\2\2\2\u0118\u011a\t\5\2\2\u0119\u0118\3\2\2"+
		"\2\u011a\u011b\3\2\2\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011d"+
		"\3\2\2\2\u011d\u011e\b\34\2\2\u011e8\3\2\2\2\u011f\u0120\7\61\2\2\u0120"+
		"\u0121\7,\2\2\u0121\u0125\3\2\2\2\u0122\u0124\13\2\2\2\u0123\u0122\3\2"+
		"\2\2\u0124\u0127\3\2\2\2\u0125\u0126\3\2\2\2\u0125\u0123\3\2\2\2\u0126"+
		"\u0128\3\2\2\2\u0127\u0125\3\2\2\2\u0128\u0129\7,\2\2\u0129\u012a\7\61"+
		"\2\2\u012a:\3\2\2\2\r\2DIKPR\u00a8\u00cc\u0113\u011b\u0125\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}